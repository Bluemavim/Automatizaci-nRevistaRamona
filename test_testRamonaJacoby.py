# Generated by Selenium IDE
import pytest
import time
import json
import random
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestTestRamonaporautor():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_testRamonaporautor(self):

    articulosRamona = u""   #String ANSI para UTF8 se utiliza u
    
    self.driver.get("http://70.32.114.117/cgi-bin/library?e=d-01000-00---off-0revista--00-1--0-10-0---0---0prompt-10---4-------0-1l--11-es-150---30-about---00-1-1-00-0-0-11-1-0utfZz-8-00&a=p&p=about")
    self.driver.set_window_size(875, 724)
    time.sleep(5)
    self.driver.find_element(By.LINK_TEXT, "autor").click()
    time.sleep(2)
    self.driver.find_element(By.LINK_TEXT, "J").click()
    time.sleep(2)
    self.driver.find_element(By.LINK_TEXT, "Jacoby, Roberto").click()
    time.sleep(1)
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td > b").click()
    time.sleep(2)
    #es plural y debe ir elements
    listJacobyTest = self.driver.find_elements(By.XPATH, "/html/body/div/div[5]/div/table[2]/tbody/tr/td[2]/table/tbody/tr")
    print("Recolectando info, cant items: " + str(len(listJacobyTest)))
    for webElement in listJacobyTest:
      welinkAutor = webElement.find_element_by_xpath("./td/a")  #//tr/td[1]/a  la primer celda Tenia el link
      linkAutor = welinkAutor.get_attribute("href")
      #titulo = webElement.text  # agarra todo el Text del TR    webElemente.find_element(".//td[3]/text()")
      titulo = webElement.find_element_by_xpath("./td/b").text
      #edicion = webElement.find_element_by_xpath("./td/br").text
      print("*********************** IMPRIMIENDO EL ELEMENTO***************************")
      print(webElement.find_element_by_xpath("./td[3]").get_attribute("innerHTML"))
      edicion = webElement.find_element_by_xpath("./td[3]").get_attribute("innerHTML").split("<br>")[1] #si hay un string con enter lo va a partir
      descripcion = webElement.find_element_by_xpath("./td/i").text

      articulosRamona += edicion + "\t" + titulo + "\t" + descripcion + "\t"+ linkAutor + "\n"
      print(titulo)

    archivo = open("articulosRamonaJacoby.txt", "w", encoding="utf8")
    archivo.write(articulosRamona)
    archivo.close()

    #titulo = self.driver.find_element(By.XPATH, "/html/body/div/div[5]/div/table[2]/tbody/tr/td[2]/table/tbody/tr[1]/td[3]/b").text
    #fecha = self.driver.find_element(By.XPATH, "/html/body/div/div[5]/div/table[2]/tbody/tr/td[2]/table/tbody/tr[1]/td[3]/text()").text
    #print("El titulo del primer artículo es ---->", titulo)
    #print("La fecha de publicación del primer artículo es ----->", fecha)
    #self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td > a > img").click()
    #self.driver.find_element(By.CSS_SELECTOR, ".bannerextra > div").click()
    #self.vars["window_handles"] = self.driver.window_handles
    #self.driver.find_element(By.LINK_TEXT, "ver artículo").click()
    #self.vars["win3425"] = self.wait_for_window(2000)
    #self.driver.switch_to.window(self.vars["win3425"])
    

